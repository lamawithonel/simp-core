# Replace the following strings in this file
# #BOOTPASS# - Your SHA-512 hashed bootloader password
# #ROOTPASS# - Your SHA-512 hashed root password
# #KSSERVER# - The IP address of your Kickstart server
# #YUMSERVER# - The IP address of your YUM server
# #LINUXDIST# - The LINUX Distribution you are kickstarting
#        - Current CASE SENSITIVE options: RedHat CentOS
#
# BOOTLOADER hash generation:
#  > grub-crypt
#
# ROOTPASS hash generation:
#  > ruby -r 'digest/sha2' -e 'puts "password".crypt("$6$" + rand(36**8).to_s(36))'

authconfig --enableshadow --passalgo=sha512
# anaconda has known issues when fips is turned on during boot, so it (fips=1)  was remove from bootloader line.
# see url: https://groups.google.com/forum/?fromgroups#!topic/simp-announce/3pBQDZl1OVc
bootloader --location=mbr --append="console=ttyS1,57600 console=tty1" --iscrypted --password=#BOOTPASS#
rootpw --iscrypted #ROOTPASS#
zerombr
key --skip
firewall --enabled --ssh
firstboot --disable
logging --level=info
network --bootproto=dhcp
reboot
selinux --enforcing
timezone --utc GMT

install
skipx

%include /tmp/repo-include

text
keyboard us
lang en_US
url --url https://#KSSERVER#/yum/#LINUXDIST#/6/x86_64 --noverifyssl

%include /tmp/part-include

%packages --nobase
redhat-lsb
xorg-x11-xauth
acl
rpm
yum
bzip2
crontabs
libutempter
pciutils
psacct
quota
tmpwatch
vixie-cron
amtu
anacron
coolkey
cpuspeed
cryptsetup-luks
dhclient
gnupg
irqbalance
krb5-workstation
libaio
logwatch
logrotate
mdadm
microcode_ctl
nss_db
openssh-clients
openssh-server
pam_krb5
pam_passwdqc
pam_pkcs11
ntp
readahead
smartmontools
stunnel
sudo
tcp_wrappers
unzip
usbutils
vconfig
wget
which
zip
aide
iptables
iptables-ipv6
netlabel_tools
audit
lsscsi
net-snmp
sysstat
vlock
mutt
subversion
-sysklogd
rsyslog7
-rsyslog
lsof
vim-enhanced
-sendmail
# dracut
## Uncomment the line above and comment out the following to prevent boot-time
## FIPS checks.
dracut-fips
fipscheck
# Puppet stuff
puppet
facter
rsync
ruby-rdoc
# In case of broken repo, these should be installed.
hdparm
kbd
libhugetlbfs
policycoreutils
prelink
rootfiles
selinux-policy-targeted
setserial
sysfsutils
udftools
%end

%pre
ksserver="#KSSERVER#"
wget --no-check-certificate -O /tmp/diskdetect.sh https://$ksserver/ks/diskdetect.sh;
chmod 750 /tmp/diskdetect.sh;
/tmp/diskdetect.sh;
wget --no-check-certificate -O /tmp/repodetect.sh https://$ksserver/ks/repodetect.sh;
chmod 750 /tmp/repodetect.sh;
/tmp/repodetect.sh '6' $ksserver;
%end

%post --nochroot --erroronfail

# If we dropped a LUKS key-file, we need to copy it into place.
if [ -f /boot/disk_creds]; then
  cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
  chown root:root $SYSIMAGE/etc/.cryptcreds
  chmod 400 $SYSIMAGE/etc/.cryptcreds

  crypt_disk=`cat /boot/crypt_disk`
  for x in /dev/$crypt_disk*; do
    if `cryptsetup isLuks $x`; then
      crypt_partition="$x"
      break
    fi
  done

  if [ -z "$crypt_partition" ]; then
    echo "Error: Could not find the encrypted partition"
    exit 1
  fi

  exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
  chvt 6

  echo "Updating the LUKS keys, this may take some time...."

  # We need to make sure our keyfile lands in slot 0 and EL6 doesn't have the
  # luksChangeKey command
  cryptsetup luksAddKey --key-slot 1 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 0

  cryptsetup luksAddKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 1

  # Modify the crypttab file
  crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

  chvt 1
  exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

  # If we got here, and this is blank, fail hard!
  if [ -z "$crypt_uuid" ]; then
    echo "Error: Could not find crypt_uuid"
    exit 1
  fi

  echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab
fi
%end

%post
ostype="#LINUXDIST#"
if [ $ostype == "CentOS" ]; then
  sed -i '/enabled=/d' /etc/yum.repos.d/CentOS-Base.repo;
  sed -i '/\[.*\]/ a\
enabled=0' /etc/yum.repos.d/CentOS-Base.repo;
fi
ksserver="#KSSERVER#"

# Turn off prelinking and remove all previous linking
sed -i '/PRELINKING=yes/ c\PRELINKING=no' /etc/sysconfig/prelink
prelink -u -a

### Comment out/remove this section to disable FIPS ###
# FIPS
if [ -e /sys/firmware/efi ]; then
  BOOTDEV=`df /boot/efi | tail -1 | cut -f1 -d' '`
else
  BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`
fi
# In case you need a working fallback
DEFAULT_KERNEL_INFO=`/sbin/grubby --default-kernel`
DEFAULT_INITRD=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep initrd | cut -f2 -d'='`
DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
/sbin/grubby --copy-default --make-default --args="boot=${BOOTDEV} fips=1" --add-kernel=`/sbin/grubby --default-kernel` --initrd=${DEFAULT_INITRD} --title="FIPS ${DEFAULT_KERNEL_TITLE}"

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

dracut -f
### END FIPS ###

# Enable the firstboot bootstrapping script.
wget --no-check-certificate -O /etc/init.d/runpuppet https://$ksserver/ks/runpuppet;
chmod 700 /etc/rc.d/init.d/runpuppet;
chkconfig --add runpuppet;
chkconfig --level 35 runpuppet on;
%end
