install
cdrom
text
keyboard us
lang en_US

%include /mnt/stage2/ks/dvd/include/common_ks_base

%pre
cd /mnt
# This is a horrible, horrible, hack to work around bugs in Anaconda.
if [ ! -d source ]; then
  mkdir -p source
fi
if [ `ls source | wc -l` -eq 0 ]; then
  mount -o bind stage2 source
fi

cp /mnt/stage2/ks/repodetect.sh /tmp;
cp /mnt/stage2/ks/diskdetect.sh /tmp;

chmod +x /tmp/*.sh

/tmp/repodetect.sh `python -c "import ConfigParser; config = ConfigParser.ConfigParser(); config.read('/mnt/stage2/.treeinfo'); print config.get('general','version')"`
/tmp/diskdetect.sh

# Prep for selecting the correct dracut to install
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" == "0" ]; then
  echo 'dracut' > /tmp/dracut_packages
else
  echo 'dracut-fips' > /tmp/dracut_packages
fi
%end

%post --nochroot --erroronfail
# SOURCE is the DVD; SYSIMAGE is the chroot'd root dir
SOURCE="/mnt/source"
SYSIMAGE="/mnt/sysimage"
DEF_VERSION='6'

# If we dropped a LUKS key-file, we need to copy it into place.
if [ -f /boot/disk_creds ]; then
  cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
  chown root:root $SYSIMAGE/etc/.cryptcreds
  chmod 400 $SYSIMAGE/etc/.cryptcreds

  crypt_disk=`cat /boot/crypt_disk`
  for x in /dev/$crypt_disk*; do
    if `cryptsetup isLuks $x`; then
      crypt_partition="$x"
      break
    fi
  done

  if [ -z "$crypt_partition" ]; then
    echo "Error: Could not find the encrypted partition"
    exit 1
  fi

  exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
  chvt 6

  echo "Updating the LUKS keys, this may take some time...."

  # We need to make sure our keyfile lands in slot 0 and EL6 doesn't have the
  # luksChangeKey command
  cryptsetup luksAddKey --key-slot 1 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 0

  cryptsetup luksAddKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 1

  # Modify the crypttab file
  crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

  chvt 1
  exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

  # If we got here, and this is blank, fail hard!
  if [ -z "$crypt_uuid" ]; then
    echo "Error: Could not find crypt_uuid"
    exit 1
  fi

  echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab
fi

# Some nonsense to try and re-mount the DVD
if [ -b /dev/cdrom ]; then
  if [ ! -d "$SOURCE" ]; then
    mkdir "$SOURCE";
  fi
  if [ ! -d "$SOURCE/Server" ]; then
    mount -t iso9660 -o ro /dev/cdrom $SOURCE;
  fi
fi

# Get the Linux distribution
# The $1 element of redhat-release is "CentOS" or "Red"
# The latter is changed to RedHat
ostype=`awk '{print $1}' ${SYSIMAGE}/etc/redhat-release 2>/dev/null`;
if [ $ostype == "Red" ]; then
  ostype="RedHat"
fi

# Get the version of RedHat/CentOS we're running under
rhversion=`sed -n '3{p; q }' /.buildstamp 2>/dev/null`;
# If this screws up for some reason, put something sane in place.
if [ -z $rhversion ]; then
    rhversion=$DEF_VERSION
fi

htype=`uname -m`;
if [ $htype != "x86_64" ]; then
    htype="i386";
fi

UMASKSAVE=`umask`
umask 0002
pushd .
mkdir -p ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype
cd ${SOURCE}
if [ $? -ne 0 ]; then
  echo "There was a problem changing directory to ${SOURCE}, the DVD will not be copied to disk." | tee ${SYSIMAGE}/root/postinstall.err
  echo "Run the following commands once the install has completed:" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tmount /dev/dvd /media" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcp -a /media/* /media/.discinfo /media/.treeinfo /srv/www/yum/$ostype/$rhversion/$htype" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\trm -rf /srv/www/yum/$ostype/$rhversion/$htype/ks/dvd" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcp -a /srv/www/yum/$ostype/$rhversion/$htype/SIMP /srv/www/yum/SIMP" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\trm -rf /srv/www/yum/$ostype/$rhversion/$htype/SIMP" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcp -a /srv/www/yum/$ostype/$rhversion/$htype/ks /srv/www" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\trm -rf /srv/www/yum/$ostype/$rhversion/$htype/ks" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcd /srv/www/yum/SIMP/x86_64; for file in ../noarch/*.rpm do; ln -s $file; done;" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcd createrepo .;" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcd /srv/www/yum/SIMP/i386; for file in ../noarch/*.rpm do; ln -s $file; done;" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcd createrepo .;" | tee -a ${SYSIMAGE}/root/postinstall.err
else
  cp -a * .discinfo .treeinfo ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype
  cp -a ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype/SIMP ${SYSIMAGE}/srv/www/yum
  rm -rf ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype/SIMP
  cp -a ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype/ks ${SYSIMAGE}/srv/www
  rm -rf ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype/ks
  rm -rf ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype/Config
  rm -rf ${SYSIMAGE}/srv/www/yum/$ostype/$rhversion/$htype/*simp_pkglist.txt
fi

if [ "$rhversion" != "$DEF_VERSION" ]; then
    pushd .;
    cd ${SYSIMAGE}/srv/www/yum/$ostype;
    ln -s $rhversion "$DEF_VERSION";
    popd
fi

popd
umask $UMASKSAVE
umount "${SOURCE}"

chown -R root.48 ${SYSIMAGE}/srv/www;
chmod -R u=rwX,g=rX,o-rwx ${SYSIMAGE}/srv/www;

# At this point, we should have everything ready to go.
# Copy the kickstart material from the DVD into rsync if possible.
src_dir="${SYSIMAGE}/srv/www/yum/${ostype}/${rhversion}/${htype}/images/pxeboot"
rsync_dir="${SYSIMAGE}/srv/rsync/tftpboot/linux-install"
rsync_target=`echo "${ostype}-${rhversion}-${htype}" | tr '[:upper:]' '[:lower:]'`
rsync_link=`echo "${ostype}-${DEF_VERSION}-${htype}" | tr '[:upper:]' '[:lower:]'`

tftpboot_setup_success=1
if [ -d "${src_dir}" ]; then
  if [ -f "${src_dir}/vmlinuz" ] && [ -f "${src_dir}/initrd.img" ]; then
    if [ -d "${rsync_dir}" ]; then
      pushd .
      cd "${rsync_dir}"
      mkdir "${rsync_target}"
      ln -sf "${rsync_target}" "${rsync_link}"
      cp -a "${src_dir}/vmlinuz" "${rsync_target}"
      cp -a "${src_dir}/initrd.img" "${rsync_target}"
      chown -R root.nobody "${rsync_target}"
      chmod 750 "${rsync_target}"
      find "${rsync_target}" -type f -exec chmod 644 {} \;
      popd

      tftpboot_setup_success=0
    fi
  fi
fi

if [ $tftpboot_setup_success -ne 0 ]; then
  echo -e "Could not add PXE Images from the disc to ${rsync_dir}/${rsync_target}" | tee -a ${SYSIMAGE}/root/postinstall.err
fi

# Don't care if this fails.
eject /tmp/cdrom || true
%end

%post
# Turn off prelinking and remove all previous
sed -i '/PRELINKING=yes/ c\PRELINKING=no' /etc/sysconfig/prelink
prelink -u -a

# FIPS
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" != "0" ]; then
  if [ -e /sys/firmware/efi ]; then
    BOOTDEV=`df /boot/efi | tail -1 | cut -f1 -d' '`
  else
    BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`
  fi

  # In case you need a working fallback
  DEFAULT_KERNEL_INFO=`/sbin/grubby --default-kernel`
  DEFAULT_INITRD=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep initrd | cut -f2 -d'='`
  DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
  /sbin/grubby --copy-default --make-default --args="boot=${BOOTDEV} fips=1" --add-kernel=`/sbin/grubby --default-kernel` --initrd=${DEFAULT_INITRD} --title="FIPS ${DEFAULT_KERNEL_TITLE}"
fi

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

for x in `ls -d /lib/modules/*`; do
  installed_kernel=`basename $x`
  dracut -f "/boot/initramfs-${installed_kernel}.img" $installed_kernel
done

ostype=`lsb_release -i | awk '{print $3}'`;
if [ $ostype == "RedHatEnterpriseServer" ]; then
  ostype="RedHat"
fi
rhversion=`lsb_release -r | sed -e 's/.*:[[:space:]]*\(.*\)$/\1/'`;
htype=`uname -m`;
if [ $htype != "x86_64" ]; then
    htype="i386";
fi

if [ -d /srv/www/yum/SIMP/x86_64 ]; then
  cd /srv/www/yum/SIMP/x86_64;

  for file in ../noarch/*.rpm; do
    ln -s $file;
  done

  createrepo . >& /dev/null;

  if [ $htype == "x86_64" ]; then
    cat << EOF >> /etc/yum.repos.d/filesystem.repo
[flocal-x86_64]
name=Local within the filesystem
baseurl=file:///srv/www/yum/SIMP/x86_64
enabled=1
gpgcheck=0
EOF
  fi
fi

if [ -d /srv/www/yum/SIMP/i386 ]; then
  cd /srv/www/yum/SIMP/i386;

  for file in ../noarch/*.rpm; do
    ln -s $file;
  done

  createrepo . >& /dev/null;

  if [ $htype == "i386" ]; then
    cat << EOF >> /etc/yum.repos.d/filesystem.repo
[flocal-i386]
name=Local within the filesystem
baseurl=file:///srv/www/yum/SIMP/i386
enabled=1
gpgcheck=0
EOF
  fi
fi

yum clean all;
yum -y --enablerepo=flocal-noarch --enablerepo=flocal-$htype update;

if [ $ostype == "RedHat" ]; then
  cat << EOF >> /etc/yum.repos.d/filesystem.repo

[frhbase]
name=$ostype $rhversion base repo
baseurl=file:///srv/www/yum/$ostype/$rhversion/$htype/Server
enabled=1
gpgcheck=0
EOF
fi

if [ $ostype == "CentOS" ]; then
  cat << EOF >> /etc/yum.repos.d/filesystem.repo

[frhbase]
name=$ostype $rhversion base repo
baseurl=file:///srv/www/yum/$ostype/$rhversion/$htype
enabled=1
gpgcheck=0
EOF
  sed -i '/enabled=/d' /etc/yum.repos.d/CentOS-Base.repo;
  sed -i '/\[.*\]/ a\
enabled=0' /etc/yum.repos.d/CentOS-Base.repo;
fi

pass_hash='$6$1tkixqzp$iihri50cUBpvDcIfq1ieftkj6ToRBrlQutpzP2sdGo5/h6dDfdXvFkmVtODwEJD0W2XYScmKrnkqRnnMEkaRi.'

groupadd -g 1777 simp >& /dev/null;
useradd -d /var/local/simp -g simp -m -p $pass_hash -s /bin/bash -u 1777 -K PASS_MAX_DAYS=90 -K PASS_MIN_DAYS=1 -K PASS_WARN_AGE=7 simp >& /dev/null;
usermod -aG wheel simp;
chage -d 0 root;
chage -d 0 simp;

pam_mod="password     requisite     pam_cracklib.so try_first_pass difok=4 retry=3 minlen=14 minclass=3 maxrepeat=2 maxsequence=4 dcredit=-1 ucredit=-1 lcredit=-1 ocredit=-1 gecoscheck reject_username enforce_for_root\n"
for auth_file in password system; do
  if [ -f /etc/pam.d/${auth_file}-auth ] && [ ! `grep -q 'Puppet' /etc/pam.d/${auth_file}-auth` ]; then
    # Remove the items that will double prompt us out of the box
    sed -i "/pam_\(pwquality\|cracklib\).so/d" /etc/pam.d/${auth_file}-auth
    # Add our cracklib line
    sed -i "s/\(password.*pam_unix.so.*\)/${pam_mod}\1/" /etc/pam.d/${auth_file}-auth
done

simp_opt=`awk -F "simp_opt=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

#Runs a script on startup to retrieve openstack user-data and place it in whatever you specify $udlocation to be
if [ $simp_opt == "openstack" ]; then
cat << EOF >> /etc/init.d/user-data
#!/bin/sh
udlocation="/srv/user-data"
udaddress="169.254.169.254"
case \$1 in
   start)
      echo "Retrieving user-data"
      curl "https://\$udaddress/latest/user-data" > \$udlocation
      chmod 700 \$udlocation
      ;;
   restart)
      echo "Retrieving user-data"
      curl "https://\$udaddress/latest/user-data" > \$udlocation
      chmod 700 \$udlocation
      ;;
   status)
      if [ -f \$udlocation ]; then
        echo "\${udlocation} exists!"
      else
        echo "\${udlocation} doesn't exist..."
      fi
      ;;
  stop)
      echo "Nothing to do..."
      ;;
esac
EOF
   chmod 755 /etc/init.d/user-data
   ln -s /etc/init.d/user-data /etc/rc.d/rc3.d/S92user-data
   ln -s /etc/init.d/user-data /etc/rc.d/rc3.d/K92user-data
fi
%end
